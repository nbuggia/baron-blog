title: Custom Site-Search Engine Using the Bing API

<p>For <a href="http://www.microsoft.com/uk/mix07/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.microsoft.com']);">Mix07 in London</a> this week I created a <a href="http://nathanbuggia.com/project/sitesearch/default.aspx?q=AJAX"  target="_blank">sample site search</a> to illustrate creating your own site search engine using the Live Search API. I&#39;ve posted the sample code here, along with some notes on implementation (including a couple features I didn&#39;t have time to finish).
</p>
<p>
Here&#39;s a quick list of the features covered:
</p>
<ul>
<li>Spelling corrections</li>
<li>Web search results</li>
<li>Image search results</li>
<li>OpenSearch 1.1 (Putting your search in the browser searchbox)</li>
<li>Live Search Macros</li>
</ul>
<h2>Setting up your environment</h2>
<p>Before we get to the code you&#39;ll need to provision yourself an <a href="http://search.live.com/developer" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://search.live.com']);">Application ID</a> to gain access to the web services, and then you&#39;ll also need to add a web reference to your visual studio project that references our WSDL: <font face="courier new,courier">http://soap.search.msn.com/webservices.asmx?wsdl</font>. Visual Studio will read the WSDL and use that to automatically generate several classes for rich objects that you can use instead of directly interacting with the SOAP API. Note, using these classes does not create any dependency on Visual Studio or your project AKA they only make your life easier.</p>
<h3 style="text-align: center">
<img src="/image.axd?picture=add-web-reference-visual-studio.jpg" alt="" />
</h3>
<p>
Once you&#39;ve added the reference, you can include the library in your project with use com.msn.search.soap
</p>
<h2>Define your custom search query</h2>
<p>
The first step is to use the <a href="http://search.msn.com/docs/help.aspx?t=SEARCH_REF_AdvSrchOperators.htm" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://search.msn.com']);">live search query language</a> to define the scope of your search. If you&#39;re building a site search there really is only one keyword you&#39;ll need, the &quot;site:&quot; operator. It scopes the search to just the domain/subdomain you specific, and you can join multiple together using the OR operator. Here&#39;s the query that we&#39;ll use in this application:
</p>
<p><font face="courier new,courier"><br />
(site:msdn2.microsoft.com OR site:asp.net OR site:codeproject.com OR site:blogs.msdn.com)</font></p>
<p>
Tip: including a lot of sites can dramatically slow down the query, so chose your sites carefully and consider omitting domains to simplify things (e.g. do this &quot;site:asp.net&quot; instead of this: &quot;site:ajax.asp.net OR www.asp.net&quot;)
</p>
<h2>Executing the query</h2>
<p>
With each request, you can query any or all of the supported data sources: web, image, spelling, phonebook (directory) and news. The query must be the same for all sources, however, there are a few parameters you can adjust within each data source you request data from. This allows you to build a rich <a href="http://en.wikipedia.org/wiki/SERP" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://en.wikipedia.org']);">SERP</a> with a single request to Live Search, and a single mark against your quota for the day.
</p>
<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">// used to index the query request and the query results</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">protected</span> <span class="kwrd">int</span> SR_SPELLING = 0;
</pre>
<pre class="alt">
<span class="lnum">   3:  </span><span class="kwrd">protected</span> <span class="kwrd">int</span> SR_IMAGE = 1;
</pre>
<pre>
<span class="lnum">   4:  </span><span class="kwrd">protected</span> <span class="kwrd">int</span> SR_WEB = 2;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   6:  </span><span class="kwrd">protected</span> SearchResponse runQuery(<span class="kwrd">string</span> query)
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>{
</pre>
<pre>
<span class="lnum">   8:  </span>    MSNSearchService s = <span class="kwrd">new</span> MSNSearchService();
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>    SearchRequest searchRequest = <span class="kwrd">new</span> SearchRequest();
</pre>
<pre>
<span class="lnum">  10:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>    SourceRequest[] sr = <span class="kwrd">new</span> SourceRequest[3];
</pre>
<pre>
<span class="lnum">  12:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    <span class="rem">// SPELLING SUGGESTION QUERY</span>
</pre>
<pre>
<span class="lnum">  14:  </span>    sr[SR_SPELLING] = <span class="kwrd">new</span> SourceRequest();
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>    sr[SR_SPELLING].Source = SourceType.Spelling;
</pre>
<pre>
<span class="lnum">  16:  </span>    sr[SR_SPELLING].ResultFields = ResultFieldMask.Title;
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  18:  </span>    <span class="rem">// IMAGE SEARCH QUERY</span>
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>    sr[SR_IMAGE] = <span class="kwrd">new</span> SourceRequest();
</pre>
<pre>
<span class="lnum">  20:  </span>    sr[SR_IMAGE].Source = SourceType.Image;
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>    sr[SR_IMAGE].ResultFields = ResultFieldMask.Description
</pre>
<pre>
<span class="lnum">  22:  </span>        | ResultFieldMask.Image | ResultFieldMask.Title;
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>    sr[SR_IMAGE].Count = 5;
</pre>
<pre>
<span class="lnum">  24:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>    <span class="rem">// WEB SEARCH QUERY</span>
</pre>
<pre>
<span class="lnum">  26:  </span>    sr[SR_WEB] = <span class="kwrd">new</span> SourceRequest();
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>    sr[SR_WEB].Source = SourceType.Web;
</pre>
<pre>
<span class="lnum">  28:  </span>    sr[SR_WEB].ResultFields = ResultFieldMask.Description
</pre>
<pre class="alt">
<span class="lnum">  29:  </span>        | ResultFieldMask.DisplayUrl | ResultFieldMask.Title
</pre>
<pre>
<span class="lnum">  30:  </span>        | ResultFieldMask.Url;
</pre>
<pre class="alt">
<span class="lnum">  31:  </span>    sr[SR_WEB].Count = 10;
</pre>
<pre>
<span class="lnum">  32:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  33:  </span>    searchRequest.Query = <span class="str">&quot;futbol&quot;</span>;
</pre>
<pre>
<span class="lnum">  34:  </span>    searchRequest.Requests = sr;
</pre>
<pre class="alt">
<span class="lnum">  35:  </span>    <span class="rem">// You can provision your application id here: http://search.live.com/developer</span>
</pre>
<pre>
<span class="lnum">  36:  </span>    searchRequest.AppID = <span class="str">&quot;Your_ApplicationID_Goes_Here&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  37:  </span>    searchRequest.CultureInfo = <span class="str">&quot;en-US&quot;</span>;
</pre>
<pre>
<span class="lnum">  38:  </span>&nbsp;
</pre>
<pre class="alt">
<span class="lnum">  39:  </span>    <span class="rem">// this call executes the search</span>
</pre>
<pre>
<span class="lnum">  40:  </span>    SearchResponse searchResponse = s.Search(searchRequest);
</pre>
<pre class="alt">
<span class="lnum">  41:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">  42:  </span>    <span class="kwrd">return</span> searchResponse;
</pre>
<pre class="alt">
<span class="lnum">  43:  </span>}
</pre>
</div>
<p><!-- END CODE FORMAT--></p>
<p>
&nbsp;
</p>
<p>
Essentially you create a collection of SourceRequest objects, each one corresponding to a different data source within the Live Search Web service. You then create a SearchRequest object, give it the SourceRequests you configured, plus some information about the actual search itself. Finally, we grab the SearchResponse object, which will contain the search results for each data source from the Web service.
</p>
<h2>Parsing the query results</h2>
<p>
Because of the rich objects created by visual studio from the WSDL, parsing the search results is relatively trivial. I have removed the code that renders the data and just left the code required to get the values you probably care about out of SearchResponse object, but I encourage you to explore the object and see what other information is in there.
</p>
<p>
Let&#39;s get the results from the spelling suggestions first because it is the easiest. Note that you will only see a result here if Live Search thinks your query term may have been misspelled. Otherwise, it won&#39;t have any results.
</p>
<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">// spelling suggestion</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">void</span> renderSpellingSuggestion(SearchResponse searchResponse)
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="kwrd">string</span> spellingSuggestion = <span class="str">&quot;&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>&nbsp;
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="rem">// Note that SR_SPELLING is simply an int defined to be 0 in this example, based on RunQuery() </span>
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    <span class="rem">//    method above.    </span>
</pre>
<pre>
<span class="lnum">   8:  </span>    <span class="kwrd">if</span> (!String.IsNullOrEmpty(searchResponse.Responses[SR_SPELLING].Results[0].Title))
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        spellingSuggestion = searchResponse.Responses[SR_SPELLING].Results[0].Title;
</pre>
<pre>
<span class="lnum">  10:  </span>}
</pre>
</div>
<p><!-- END CODE FORMAT--></p>
<p>
&nbsp;
</p>
<p>
Next we&#39;ll parse the web results:
</p>
<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">// web results</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">void</span> renderWebResults(SearchResponse searchResponse)
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="rem">// Note that SR_WEB is simply an int defined to be 2 in this example, based on RunQuery() </span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="rem">//    method above.</span>
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">foreach</span> (Result sourceResult <span class="kwrd">in</span> searchResponse.Responses[SR_WEB].Results)
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    {
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">string</span> title, description, url;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>
</pre>
<pre>
<span class="lnum">  10:  </span>        title = (!String.IsNullOrEmpty(sourceResult.Title)) ? sourceResult.Title : <span class="str">&quot;&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>        description = (!String.IsNullOrEmpty(sourceResult.Description)) ? sourceResult.Description : <span class="str">&quot;&quot;</span>;
</pre>
<pre>
<span class="lnum">  12:  </span>        url = (!String.IsNullOrEmpty(sourceResult.Url)) ? sourceResult.Url : <span class="str">&quot;&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>    }
</pre>
<pre>
<span class="lnum">  14:  </span>}
</pre>
</div>
<p><!-- END CODE FORMAT--></p>
<p>
&nbsp;
</p>
<p>
And finally the image results, this is extra long because there are lots of interesting fields:
</p>
<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>
<div class="csharpcode">
<pre class="alt">
<span class="lnum">   1:  </span><span class="rem">// image results</span>
</pre>
<pre>
<span class="lnum">   2:  </span><span class="kwrd">void</span> renderImageResults(SearchResponse searchResponse)
</pre>
<pre class="alt">
<span class="lnum">   3:  </span>{
</pre>
<pre>
<span class="lnum">   4:  </span>    <span class="rem">// Note that SR_IMAGE is simply an int defined to be 1 in this example, based on RunQuery() </span>
</pre>
<pre class="alt">
<span class="lnum">   5:  </span>    <span class="rem">//    method above.</span>
</pre>
<pre>
<span class="lnum">   6:  </span>    <span class="kwrd">foreach</span> (Result sourceResult <span class="kwrd">in</span> searchResponse.Responses[SR_IMAGE].Results)
</pre>
<pre class="alt">
<span class="lnum">   7:  </span>    {
</pre>
<pre>
<span class="lnum">   8:  </span>        <span class="kwrd">string</span> title, description, imageUrl, imagePageUrl, thumbnailUrl, thumbnailPageUrl;
</pre>
<pre class="alt">
<span class="lnum">   9:  </span>        <span class="kwrd">int</span> imageHeight, imageWidth, imageFileSize;
</pre>
<pre>
<span class="lnum">  10:  </span>        <span class="kwrd">int</span> thumbnailHeight, thumbnailWidth, thumbnailFileSize;
</pre>
<pre class="alt">
<span class="lnum">  11:  </span>
</pre>
<pre>
<span class="lnum">  12:  </span>        title = (!String.IsNullOrEmpty(sourceResult.Title)) ? sourceResult.Title : <span class="str">&quot;&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  13:  </span>        description = (!String.IsNullOrEmpty(sourceResult.Description)) ? sourceResult.Description : <span class="str">&quot;&quot;</span>;
</pre>
<pre>
<span class="lnum">  14:  </span>
</pre>
<pre class="alt">
<span class="lnum">  15:  </span>        imagePageUrl = (!String.IsNullOrEmpty(sourceResult.Url)) ? sourceResult.Url : <span class="str">&quot;&quot;</span>;
</pre>
<pre>
<span class="lnum">  16:  </span>        imageUrl = (!String.IsNullOrEmpty(sourceResult.Image.ImageURL)) ? sourceResult.Image.ImageURL : <span class="str">&quot;&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  17:  </span>        imageHeight = sourceResult.Image.ImageHeight;
</pre>
<pre>
<span class="lnum">  18:  </span>        imageWidth = sourceResult.Image.ImageWidth;
</pre>
<pre class="alt">
<span class="lnum">  19:  </span>        imageFileSize = sourceResult.Image.ImageFileSize;
</pre>
<pre>
<span class="lnum">  20:  </span>
</pre>
<pre class="alt">
<span class="lnum">  21:  </span>        thumbnailPageUrl = (!String.IsNullOrEmpty(sourceResult.Url)) ? sourceResult.Url : <span class="str">&quot;&quot;</span>;
</pre>
<pre>
<span class="lnum">  22:  </span>        thumbnailUrl = (!String.IsNullOrEmpty(sourceResult.Image.ThumbnailURL)) ? sourceResult.Image.ThumbnailURL : <span class="str">&quot;&quot;</span>;
</pre>
<pre class="alt">
<span class="lnum">  23:  </span>        thumbnailHeight = sourceResult.Image.ThumbnailHeight;
</pre>
<pre>
<span class="lnum">  24:  </span>        thumbnailWidth = sourceResult.Image.ThumbnailWidth;
</pre>
<pre class="alt">
<span class="lnum">  25:  </span>        thumbnailFileSize = sourceResult.Image.ThumbnailFileSize;
</pre>
<pre>
<span class="lnum">  26:  </span>    }
</pre>
<pre class="alt">
<span class="lnum">  27:  </span>}
</pre>
</div>
<p><!-- END CODE FORMAT --></p>
<h3>&nbsp;</h3>
<h2>Advanced Features</h2>
<p>
For more information on the advanced features like adding your search engine to the browser&#39;s search box, and deeper integration with Live.com, check out the power point presentation.
</p>
<h2>Files and resources:</h2>
<ul>
<li><a href="http://nathanbuggia.com/project/sitesearch/default.aspx?q=ajax" >Online demo</a></li>
<li><a href="http://nathanbuggia.com/file.axd?file=Live-Search-Web-Service.ppt" >Overview Presentation (PPT)</a></li>
<li><a href="http://nathanbuggia.com/file.axd?file=sitesearch-live-search-api.zip" >Source Code </a></li>
<li><a href="http://nathanbuggia.com/project/sitesearch/opensearch.xml" >OpenSearch 1.1 XML file</a></li>
</ul>